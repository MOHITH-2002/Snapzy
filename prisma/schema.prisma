// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String          @unique
  email         String          @unique
  emailVerified DateTime?
  bio           String?
  website       String?
  image         String?
  slug          String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceived")
  stories                Story[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  img         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @db.ObjectId 
  likes       Like[]
  comments    Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  desc      String
  userId    String @db.ObjectId 
  postId    String @db.ObjectId 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String @db.ObjectId 
  postId    String? @db.ObjectId 
  commentId String? @db.ObjectId 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  followerId  String @db.ObjectId 
  followingId String @db.ObjectId 
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}

model FollowRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  senderId    String @db.ObjectId 
  receiverId  String @db.ObjectId 
  sender      User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  @@unique([senderId, receiverId])
}

model Block {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  blockerId   String @db.ObjectId 
  blockedId   String @db.ObjectId 
  blocker     User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked     User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Story {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  img         String
  userId      String   @unique @db.ObjectId 
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
